 # MIPS Project 1
.data
#variable to hold user input (up to 8 characters and an end-of-line value)
user_input: 
                        .space 9
#variable to prompt user for input
ask_input:
.asciiz "\Enter up to 8 characters: "
#variable which holds an error message 
  error: 
.asciiz "Invalid hexadecimal number”

.text       
                                                                    
Main:
#load address for "ask_input" from memory and store it in register $a0
la $a0, ask_input
#load 4 (the op code for print string) into register $v0
li $v0, 4
#read opcode in register $v0, print string located in $a0
syscall

#load address for “user_input” from memory, store in temp register $t0
la $t0, user_input
#load 8 (the op code for reading user input) into $v0
li $v0, 8
        
    #load input value from $t0 into argument register
la $a0, 0($t0) 
#load the length of the input into argument register $a0
la $a1, 9 

syscall

        ################
#Moves the 9th byte from your input to $t7
addi $t7, $t0, 8
#Move input into register for use in other submethods 
addi $s5, $t0, 0 
#Set counter to keep track of number of characters to 0
add $s3, $zero, $zero 
           ############### 
#Check for 0 (NULL) or 10 (EOL) in a loop
LENGTH_OF_INPUT:
#Load first byte from $s5 to $t1
lb $t1, 0($s5)

beq $t1, 32, SPACING

#Check if register equals 0, if yes jump to DECREASE_COUNTER
beq $t1, $zero, DECREASE COUNTER
# Check if register equals 10, if yes jump to DECREASE_COUNTER
beq $t1, 10, DECREASE_COUNTER
#Increase counter by 4
addi $s3, $s3, 4
#Increase byte by 1
addi $s5, $s5, 1
#Jump to the top of the loop
j LENGTH_OF_INPUT

######################
SPACING:
    addi $s5, $s5, 1
    j LENGTH_OF_INPUT

#Delete the most recent value included by the counter if the value was NULL or EOL
DECREASE_COUNTER:
 #Subtract 4 from $s3
 addi $s3,$s3,-4
##########
#For each Byte, confirm if it is between 0-9, a-f, or A-F
TEST_VALID_OR_INVALID:
 #Load the user input into temporary register $t1
 lb $t1, 0($t0)

 #Test if character is a space
 beq $t1, 32, INCREASE

 beq $t1, 0, HANDLE_SIGNED
 beq $t1, 10, HANDLE_SIGNED


 #Check if input value is less than ASCII value 0. If yes, go to INVALID_INPUT
 blt $t1, 48, INVALID_INPUT
 #Store 48 into $s1 register for use during decimal conversion calculation
 addi $s1, $0, 48

 #Check if input value is equal to or less than ASCII value for 9. If yes, go to VALID_INPUT
 blt $t1, 58, VALID_INPUT

 #Check if input value is less than ASCII value for A. If yes, go to INVALID_INPUT 
 blt $t1, 65, INVALID_INPUT
 #Store 65 into $s1 register for use during decimal conversion calculation
 addi $s1, $0, 55


 #Check if input value is equal to or less than ASCII value for F. If yes, go to VALID_INPUT
 blt $t1, 71, VALID_INPUT

 #Check if input value is less than ASCII value a. If yes, go to INVALID_INPUT
 blt $t1, 97, INVALID_INPUT
 #Store 97 into $s1 register for use during decimal conversion calculation
 addi $s1, $0, 87

 #Check if input value is equal to or less than ASCII value for f. If yes, go to VALID_INPUT
 blt $t1, 103, VALID_INPUT

 bgt $t1, 102, INVALID_INPUT

######################
INCREASE:
    addi $t0, $t0, 1
    j TEST_VALID_OR_INVALID
    
##########################

